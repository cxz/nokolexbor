/*
 * Summary: interface for all global variables of the library
 * Description: all the global variables and thread handling for
 *              those variables is handled by this module.
 *
 * The bottom of this file is automatically generated by build_glob.py
 * based on the description file global.data
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Gary Pennington <Gary.Pennington@uk.sun.com>, Daniel Veillard
 */

#ifndef __XML_GLOBALS_H
#define __XML_GLOBALS_H

#include "xmlversion.h"
#include "parser.h"
#include "xmlerror.h"
#include "SAX2.h"
#include "xmlmemory.h"

#ifdef __cplusplus
extern "C" {
#endif

XML_DEPRECATED
XMLPUBFUN void XMLCALL nl_xmlInitGlobals(void);
XML_DEPRECATED
XMLPUBFUN void XMLCALL nl_xmlCleanupGlobals(void);

/**
 * xmlParserInputBufferCreateFilenameFunc:
 * @URI: the URI to read from
 * @enc: the requested source encoding
 *
 * Signature for the function doing the lookup for a suitable input method
 * corresponding to an URI.
 *
 * Returns the new xmlParserInputBufferPtr in case of success or NULL if no
 *         method was found.
 */
typedef xmlParserInputBufferPtr (*xmlParserInputBufferCreateFilenameFunc) (const char *URI,
									   xmlCharEncoding enc);


/**
 * xmlOutputBufferCreateFilenameFunc:
 * @URI: the URI to write to
 * @enc: the requested target encoding
 *
 * Signature for the function doing the lookup for a suitable output method
 * corresponding to an URI.
 *
 * Returns the new xmlOutputBufferPtr in case of success or NULL if no
 *         method was found.
 */
typedef xmlOutputBufferPtr (*xmlOutputBufferCreateFilenameFunc) (const char *URI,
								 xmlCharEncodingHandlerPtr encoder,
								 int compression);

XMLPUBFUN xmlParserInputBufferCreateFilenameFunc
XMLCALL xmlParserInputBufferCreateFilenameDefault (xmlParserInputBufferCreateFilenameFunc func);
XMLPUBFUN xmlOutputBufferCreateFilenameFunc
XMLCALL xmlOutputBufferCreateFilenameDefault (xmlOutputBufferCreateFilenameFunc func);

/*
 * Externally global symbols which need to be protected for backwards
 * compatibility support.
 */

#undef	htmlDefaultSAXHandler
#undef	nl_oldXMLWDcompatibility
#undef	nl_xmlBufferAllocScheme
#undef	nl_xmlDefaultBufferSize
#undef	xmlDefaultSAXHandler
#undef	nl_xmlDefaultSAXLocator
#undef	nl_xmlDoValidityCheckingDefaultValue
#undef	nl_xmlFree
#undef	nl_xmlGenericError
#undef	nl_xmlStructuredError
#undef	nl_xmlGenericErrorContext
#undef	nl_xmlStructuredErrorContext
#undef	nl_xmlGetWarningsDefaultValue
#undef	nl_xmlIndentTreeOutput
#undef  nl_xmlTreeIndentString
#undef	nl_xmlKeepBlanksDefaultValue
#undef	nl_xmlLineNumbersDefaultValue
#undef	nl_xmlLoadExtDtdDefaultValue
#undef	nl_xmlMalloc
#undef	nl_xmlMallocAtomic
#undef	nl_xmlMemStrdup
#undef	nl_xmlParserDebugEntities
#undef	nl_xmlParserVersion
#undef	nl_xmlPedanticParserDefaultValue
#undef	nl_xmlRealloc
#undef	nl_xmlSaveNoEmptyTags
#undef	nl_xmlSubstituteEntitiesDefaultValue
#undef  nl_xmlRegisterNodeDefaultValue
#undef  nl_xmlDeregisterNodeDefaultValue
#undef  nl_xmlLastError
#undef  nl_xmlParserInputBufferCreateFilenameValue
#undef  nl_xmlOutputBufferCreateFilenameValue

/**
 * xmlRegisterNodeFunc:
 * @node: the current node
 *
 * Signature for the registration callback of a created node
 */
typedef void (*xmlRegisterNodeFunc) (lxb_dom_node_t_ptr node);
/**
 * xmlDeregisterNodeFunc:
 * @node: the current node
 *
 * Signature for the deregistration callback of a discarded node
 */
typedef void (*xmlDeregisterNodeFunc) (lxb_dom_node_t_ptr node);

typedef struct _xmlGlobalState xmlGlobalState;
typedef xmlGlobalState *xmlGlobalStatePtr;
struct _xmlGlobalState
{
	const char *nl_xmlParserVersion;

	xmlSAXLocator nl_xmlDefaultSAXLocator;
	xmlSAXHandlerV1 xmlDefaultSAXHandler;
	xmlSAXHandlerV1 docbDefaultSAXHandler; /* unused */
	xmlSAXHandlerV1 htmlDefaultSAXHandler;

	xmlFreeFunc nl_xmlFree;
	xmlMallocFunc nl_xmlMalloc;
	xmlStrdupFunc nl_xmlMemStrdup;
	xmlReallocFunc nl_xmlRealloc;

	xmlGenericErrorFunc nl_xmlGenericError;
	xmlStructuredErrorFunc nl_xmlStructuredError;
	void *nl_xmlGenericErrorContext;

	int nl_oldXMLWDcompatibility;

	xmlBufferAllocationScheme nl_xmlBufferAllocScheme;
	int nl_xmlDefaultBufferSize;

	int nl_xmlSubstituteEntitiesDefaultValue;
	int nl_xmlDoValidityCheckingDefaultValue;
	int nl_xmlGetWarningsDefaultValue;
	int nl_xmlKeepBlanksDefaultValue;
	int nl_xmlLineNumbersDefaultValue;
	int nl_xmlLoadExtDtdDefaultValue;
	int nl_xmlParserDebugEntities;
	int nl_xmlPedanticParserDefaultValue;

	int nl_xmlSaveNoEmptyTags;
	int nl_xmlIndentTreeOutput;
	const char *nl_xmlTreeIndentString;

	xmlRegisterNodeFunc nl_xmlRegisterNodeDefaultValue;
	xmlDeregisterNodeFunc nl_xmlDeregisterNodeDefaultValue;

	xmlMallocFunc nl_xmlMallocAtomic;
	xmlError nl_xmlLastError;

	xmlParserInputBufferCreateFilenameFunc nl_xmlParserInputBufferCreateFilenameValue;
	xmlOutputBufferCreateFilenameFunc nl_xmlOutputBufferCreateFilenameValue;

	void *nl_xmlStructuredErrorContext;
};

#ifdef __cplusplus
}
#endif
#include "threads.h"
#ifdef __cplusplus
extern "C" {
#endif

XMLPUBFUN void XMLCALL	nl_xmlInitializeGlobalState(xmlGlobalStatePtr gs);

XMLPUBFUN void XMLCALL nl_xmlThrDefSetGenericErrorFunc(void *ctx, xmlGenericErrorFunc handler);

XMLPUBFUN void XMLCALL nl_xmlThrDefSetStructuredErrorFunc(void *ctx, xmlStructuredErrorFunc handler);

XMLPUBFUN xmlRegisterNodeFunc XMLCALL nl_xmlRegisterNodeDefault(xmlRegisterNodeFunc func);
XMLPUBFUN xmlRegisterNodeFunc XMLCALL nl_xmlThrDefRegisterNodeDefault(xmlRegisterNodeFunc func);
XMLPUBFUN xmlDeregisterNodeFunc XMLCALL nl_xmlDeregisterNodeDefault(xmlDeregisterNodeFunc func);
XMLPUBFUN xmlDeregisterNodeFunc XMLCALL nl_xmlThrDefDeregisterNodeDefault(xmlDeregisterNodeFunc func);

XMLPUBFUN xmlOutputBufferCreateFilenameFunc XMLCALL
	xmlThrDefOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc func);
XMLPUBFUN xmlParserInputBufferCreateFilenameFunc XMLCALL
	xmlThrDefParserInputBufferCreateFilenameDefault(
				xmlParserInputBufferCreateFilenameFunc func);

/*
 * In general the memory allocation entry points are not kept
 * thread specific but this can be overridden by LIBXML_THREAD_ALLOC_ENABLED
 *    - nl_xmlMalloc
 *    - nl_xmlMallocAtomic
 *    - nl_xmlRealloc
 *    - nl_xmlMemStrdup
 *    - nl_xmlFree
 */

#ifdef LIBXML_THREAD_ALLOC_ENABLED
/** DOC_DISABLE */

#ifdef LIBXML_THREAD_ENABLED
XMLPUBFUN  xmlMallocFunc * XMLCALL __xmlMalloc(void);
#define nl_xmlMalloc \
(*(__xmlMalloc()))
#else
XMLPUBVAR xmlMallocFunc nl_xmlMalloc;
#endif

#ifdef LIBXML_THREAD_ENABLED
XMLPUBFUN  xmlMallocFunc * XMLCALL __xmlMallocAtomic(void);
#define nl_xmlMallocAtomic \
(*(__xmlMallocAtomic()))
#else
XMLPUBVAR xmlMallocFunc nl_xmlMallocAtomic;
#endif

#ifdef LIBXML_THREAD_ENABLED
XMLPUBFUN  xmlReallocFunc * XMLCALL __xmlRealloc(void);
#define nl_xmlRealloc \
(*(__xmlRealloc()))
#else
XMLPUBVAR xmlReallocFunc nl_xmlRealloc;
#endif

#ifdef LIBXML_THREAD_ENABLED
XMLPUBFUN  xmlFreeFunc * XMLCALL __xmlFree(void);
#define nl_xmlFree \
(*(__xmlFree()))
#else
XMLPUBVAR xmlFreeFunc nl_xmlFree;
#endif

#ifdef LIBXML_THREAD_ENABLED
XMLPUBFUN  xmlStrdupFunc * XMLCALL __xmlMemStrdup(void);
#define nl_xmlMemStrdup \
(*(__xmlMemStrdup()))
#else
XMLPUBVAR xmlStrdupFunc nl_xmlMemStrdup;
#endif

/** DOC_ENABLE */
#else /* !LIBXML_THREAD_ALLOC_ENABLED */
XMLPUBVAR xmlMallocFunc nl_xmlMalloc;
XMLPUBVAR xmlMallocFunc nl_xmlMallocAtomic;
XMLPUBVAR xmlReallocFunc nl_xmlRealloc;
XMLPUBVAR xmlFreeFunc nl_xmlFree;
XMLPUBVAR xmlStrdupFunc nl_xmlMemStrdup;
#endif /* LIBXML_THREAD_ALLOC_ENABLED */

#ifdef LIBXML_HTML_ENABLED
XML_DEPRECATED
XMLPUBFUN xmlSAXHandlerV1 * XMLCALL __htmlDefaultSAXHandler(void);
#ifdef LIBXML_THREAD_ENABLED
#define htmlDefaultSAXHandler \
(*(__htmlDefaultSAXHandler()))
#else
XML_DEPRECATED
XMLPUBVAR xmlSAXHandlerV1 htmlDefaultSAXHandler;
#endif
#endif

XMLPUBFUN xmlError * XMLCALL __nl_xmlLastError(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlLastError \
(*(__nl_xmlLastError()))
#else
XMLPUBVAR xmlError nl_xmlLastError;
#endif

/*
 * Everything starting from the line below is
 * Automatically generated by build_glob.py.
 * Do not modify the previous line.
 */


XML_DEPRECATED
XMLPUBFUN int * XMLCALL __nl_oldXMLWDcompatibility(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_oldXMLWDcompatibility \
(*(__nl_oldXMLWDcompatibility()))
#else
XML_DEPRECATED
XMLPUBVAR int nl_oldXMLWDcompatibility;
#endif

XML_DEPRECATED
XMLPUBFUN xmlBufferAllocationScheme * XMLCALL __nl_xmlBufferAllocScheme(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlBufferAllocScheme \
(*(__nl_xmlBufferAllocScheme()))
#else
XML_DEPRECATED
XMLPUBVAR xmlBufferAllocationScheme nl_xmlBufferAllocScheme;
#endif
XML_DEPRECATED
XMLPUBFUN xmlBufferAllocationScheme XMLCALL
	nl_xmlThrDefBufferAllocScheme(xmlBufferAllocationScheme v);

XML_DEPRECATED
XMLPUBFUN int * XMLCALL __nl_xmlDefaultBufferSize(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlDefaultBufferSize \
(*(__nl_xmlDefaultBufferSize()))
#else
XML_DEPRECATED
XMLPUBVAR int nl_xmlDefaultBufferSize;
#endif
XML_DEPRECATED
XMLPUBFUN int XMLCALL nl_xmlThrDefDefaultBufferSize(int v);

XML_DEPRECATED
XMLPUBFUN xmlSAXHandlerV1 * XMLCALL __xmlDefaultSAXHandler(void);
#ifdef LIBXML_THREAD_ENABLED
#define xmlDefaultSAXHandler \
(*(__xmlDefaultSAXHandler()))
#else
XML_DEPRECATED
XMLPUBVAR xmlSAXHandlerV1 xmlDefaultSAXHandler;
#endif

XML_DEPRECATED
XMLPUBFUN xmlSAXLocator * XMLCALL __nl_xmlDefaultSAXLocator(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlDefaultSAXLocator \
(*(__nl_xmlDefaultSAXLocator()))
#else
XML_DEPRECATED
XMLPUBVAR xmlSAXLocator nl_xmlDefaultSAXLocator;
#endif

XMLPUBFUN int * XMLCALL __nl_xmlDoValidityCheckingDefaultValue(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlDoValidityCheckingDefaultValue \
(*(__nl_xmlDoValidityCheckingDefaultValue()))
#else
XMLPUBVAR int nl_xmlDoValidityCheckingDefaultValue;
#endif
XMLPUBFUN int XMLCALL nl_xmlThrDefDoValidityCheckingDefaultValue(int v);

XMLPUBFUN xmlGenericErrorFunc * XMLCALL __nl_xmlGenericError(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlGenericError \
(*(__nl_xmlGenericError()))
#else
XMLPUBVAR xmlGenericErrorFunc nl_xmlGenericError;
#endif

XMLPUBFUN xmlStructuredErrorFunc * XMLCALL __nl_xmlStructuredError(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlStructuredError \
(*(__nl_xmlStructuredError()))
#else
XMLPUBVAR xmlStructuredErrorFunc nl_xmlStructuredError;
#endif

XMLPUBFUN void * * XMLCALL __nl_xmlGenericErrorContext(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlGenericErrorContext \
(*(__nl_xmlGenericErrorContext()))
#else
XMLPUBVAR void * nl_xmlGenericErrorContext;
#endif

XMLPUBFUN void * * XMLCALL __nl_xmlStructuredErrorContext(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlStructuredErrorContext \
(*(__nl_xmlStructuredErrorContext()))
#else
XMLPUBVAR void * nl_xmlStructuredErrorContext;
#endif

XMLPUBFUN int * XMLCALL __nl_xmlGetWarningsDefaultValue(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlGetWarningsDefaultValue \
(*(__nl_xmlGetWarningsDefaultValue()))
#else
XMLPUBVAR int nl_xmlGetWarningsDefaultValue;
#endif
XMLPUBFUN int XMLCALL nl_xmlThrDefGetWarningsDefaultValue(int v);

XMLPUBFUN int * XMLCALL __nl_xmlIndentTreeOutput(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlIndentTreeOutput \
(*(__nl_xmlIndentTreeOutput()))
#else
XMLPUBVAR int nl_xmlIndentTreeOutput;
#endif
XMLPUBFUN int XMLCALL nl_xmlThrDefIndentTreeOutput(int v);

XMLPUBFUN const char * * XMLCALL __nl_xmlTreeIndentString(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlTreeIndentString \
(*(__nl_xmlTreeIndentString()))
#else
XMLPUBVAR const char * nl_xmlTreeIndentString;
#endif
XMLPUBFUN const char * XMLCALL nl_xmlThrDefTreeIndentString(const char * v);

XMLPUBFUN int * XMLCALL __nl_xmlKeepBlanksDefaultValue(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlKeepBlanksDefaultValue \
(*(__nl_xmlKeepBlanksDefaultValue()))
#else
XMLPUBVAR int nl_xmlKeepBlanksDefaultValue;
#endif
XMLPUBFUN int XMLCALL nl_xmlThrDefKeepBlanksDefaultValue(int v);

XML_DEPRECATED
XMLPUBFUN int * XMLCALL __nl_xmlLineNumbersDefaultValue(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlLineNumbersDefaultValue \
(*(__nl_xmlLineNumbersDefaultValue()))
#else
XML_DEPRECATED
XMLPUBVAR int nl_xmlLineNumbersDefaultValue;
#endif
XML_DEPRECATED
XMLPUBFUN int XMLCALL nl_xmlThrDefLineNumbersDefaultValue(int v);

XMLPUBFUN int * XMLCALL __nl_xmlLoadExtDtdDefaultValue(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlLoadExtDtdDefaultValue \
(*(__nl_xmlLoadExtDtdDefaultValue()))
#else
XMLPUBVAR int nl_xmlLoadExtDtdDefaultValue;
#endif
XMLPUBFUN int XMLCALL nl_xmlThrDefLoadExtDtdDefaultValue(int v);

XMLPUBFUN int * XMLCALL __nl_xmlParserDebugEntities(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlParserDebugEntities \
(*(__nl_xmlParserDebugEntities()))
#else
XMLPUBVAR int nl_xmlParserDebugEntities;
#endif
XMLPUBFUN int XMLCALL nl_xmlThrDefParserDebugEntities(int v);

XMLPUBFUN const char * * XMLCALL __nl_xmlParserVersion(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlParserVersion \
(*(__nl_xmlParserVersion()))
#else
XMLPUBVAR const char * nl_xmlParserVersion;
#endif

XML_DEPRECATED
XMLPUBFUN int * XMLCALL __nl_xmlPedanticParserDefaultValue(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlPedanticParserDefaultValue \
(*(__nl_xmlPedanticParserDefaultValue()))
#else
XML_DEPRECATED
XMLPUBVAR int nl_xmlPedanticParserDefaultValue;
#endif
XML_DEPRECATED
XMLPUBFUN int XMLCALL nl_xmlThrDefPedanticParserDefaultValue(int v);

XMLPUBFUN int * XMLCALL __nl_xmlSaveNoEmptyTags(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlSaveNoEmptyTags \
(*(__nl_xmlSaveNoEmptyTags()))
#else
XMLPUBVAR int nl_xmlSaveNoEmptyTags;
#endif
XMLPUBFUN int XMLCALL nl_xmlThrDefSaveNoEmptyTags(int v);

XMLPUBFUN int * XMLCALL __nl_xmlSubstituteEntitiesDefaultValue(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlSubstituteEntitiesDefaultValue \
(*(__nl_xmlSubstituteEntitiesDefaultValue()))
#else
XMLPUBVAR int nl_xmlSubstituteEntitiesDefaultValue;
#endif
XMLPUBFUN int XMLCALL nl_xmlThrDefSubstituteEntitiesDefaultValue(int v);

XML_DEPRECATED
XMLPUBFUN xmlRegisterNodeFunc * XMLCALL __nl_xmlRegisterNodeDefaultValue(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlRegisterNodeDefaultValue \
(*(__nl_xmlRegisterNodeDefaultValue()))
#else
XML_DEPRECATED
XMLPUBVAR xmlRegisterNodeFunc nl_xmlRegisterNodeDefaultValue;
#endif

XML_DEPRECATED
XMLPUBFUN xmlDeregisterNodeFunc * XMLCALL __nl_xmlDeregisterNodeDefaultValue(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlDeregisterNodeDefaultValue \
(*(__nl_xmlDeregisterNodeDefaultValue()))
#else
XML_DEPRECATED
XMLPUBVAR xmlDeregisterNodeFunc nl_xmlDeregisterNodeDefaultValue;
#endif

XML_DEPRECATED
XMLPUBFUN xmlParserInputBufferCreateFilenameFunc * XMLCALL \
				__nl_xmlParserInputBufferCreateFilenameValue(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlParserInputBufferCreateFilenameValue \
(*(__nl_xmlParserInputBufferCreateFilenameValue()))
#else
XML_DEPRECATED
XMLPUBVAR xmlParserInputBufferCreateFilenameFunc nl_xmlParserInputBufferCreateFilenameValue;
#endif

XML_DEPRECATED
XMLPUBFUN xmlOutputBufferCreateFilenameFunc * XMLCALL __nl_xmlOutputBufferCreateFilenameValue(void);
#ifdef LIBXML_THREAD_ENABLED
#define nl_xmlOutputBufferCreateFilenameValue \
(*(__nl_xmlOutputBufferCreateFilenameValue()))
#else
XML_DEPRECATED
XMLPUBVAR xmlOutputBufferCreateFilenameFunc nl_xmlOutputBufferCreateFilenameValue;
#endif

#ifdef __cplusplus
}
#endif

#endif /* __XML_GLOBALS_H */
